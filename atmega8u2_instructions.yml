# Uses a set of flags (k, rdh?, rdl?, rr?, rd?, r0?), a set of registers, pc (for jump), stack, set_io, and set_flag
- id: 0
  type: instruction
  mnemonic: add
  class: arithmetic
  inputs: [rd, rr]
  outputs: [rd]
  f: "rd = rd + rr"
  flags: [z,c,v,n,h]
  clocks: 1
- id: 1
  type: instruction
  mnemonic: adc
  class: arithmetic
  inputs: [rd, rr]
  outputs: [rd]
  f: "rd = rd + rr + c"
  flags: [z,c,v,n,h]
  clocks: 1
- id: 2
  type: instruction
  mnemonic: adiw
  class: arithmetic
  inputs: ["rdh:rdl", k]
  outputs: ["rdh:rdl"]
  f: "rdh:rdl = rdh:rdl + k"
  flags: [z,c,v,n,s]
  clocks: 2
- id: 3
  type: instruction
  mnemonic: sub
  class: arithmetic
  inputs: [rd, rr]
  outputs: [rd]
  f: "rd = rd - rr"
  flags: [z,c,v,n,h]
  clocks: 1
- id: 4
  type: instruction
  mnemonic: subi
  class: arithmetic
  inputs: [rd, k]
  outputs: [rd]
  f: "rd = rd - k"
  flags: [z,c,v,n,h]
  clocks: 1
- id: 5
  type: instruction
  mnemonic: sbc
  class: arithmetic
  inputs: [rd, rr]
  outputs: [rd]
  f: "rd = rd - rr - c"
  flags: [z,c,v,n,h]
  clocks: 1
- id: 6
  type: instruction
  mnemonic: sbci
  class: arithmetic
  inputs: [rd, k]
  outputs: [rd]
  f: "rd = rd - k - c"
  flags: [z,c,v,n,h]
  clocks: 1
- id: 7
  type: instruction
  mnemonic: sbiw
  class: arithmetic
  inputs: ["rdh:rdl", k]
  outputs: ["rdh:rdl"]
  f: "rdh:rdl = rdh:rdl + k"
  flags: [z,c,v,n,s]
  clocks: 2
- id: 8
  type: instruction
  mnemonic: and
  class: arithmetic
  inputs: [rd, rr]
  outputs: [rd]
  f: "rd = rd & rr"
  flags: [z,n,v]
  clocks: 1
- id: 9
  type: instruction
  mnemonic: andi
  class: arithmetic
  inputs: [rd, k]
  outputs: [rd]
  f: "rd = rd & k"
  flags: [z,n,v]
  clocks: 1
- id: 10
  type: instruction
  mnemonic: or
  class: arithmetic
  inputs: [rd, rr]
  outputs: [rd]
  f: "rd = rd | rr"
  flags: [z,n,v]
  clocks: 1
- id: 11
  type: instruction
  mnemonic: ori
  class: arithmetic
  inputs: [rd, k]
  outputs: [rd]
  f: "rd = rd | k"
  flags: [z,n,v]
  clocks: 1
- id: 12
  type: instruction
  mnemonic: eor
  class: arithmetic
  inputs: [rd, rr]
  outputs: [rd]
  f: "rd = rd ^ rr"
  flags: [z,n,v]
  clocks: 1
- id: 13
  type: instruction
  mnemonic: com
  class: arithmetic
  inputs: [rd]
  outputs: [rd]
  f: "rd = 255 - rd"
  flags: [z,c,n,v]
  clocks: 1
- id: 14
  type: instruction
  mnemonic: neg
  class: arithmetic
  inputs: [rd]
  outputs: [rd]
  f: "rd = 0 - rd"
  flags: [z,c,n,v,h]
  clocks: 1
- id: 15
  type: instruction
  mnemonic: sbr
  class: arithmetic
  inputs: [rd, k]
  outputs: [rd]
  f: "rd = rd | k"
  flags: [z,n,v]
  clocks: 1
- id: 16
  type: instruction
  mnemonic: cbr
  class: arithmetic
  inputs: [rd, k]
  outputs: [rd]
  f: "rd = rd & (255 - k)"
  flags: [z,n,v]
  clocks: 1
- id: 17
  type: instruction
  mnemonic: inc
  class: arithmetic
  inputs: [rd]
  outputs: [rd]
  f: "rd = rd + 1"
  flags: [z,n,v]
  clocks: 1
- id: 18
  type: instruction
  mnemonic: dec
  class: arithmetic
  inputs: [rd]
  outputs: [rd]
  f: "rd = rd - 1"
  flags: [z,n,v]
  clocks: 1
- id: 19
  type: instruction
  mnemonic: tst
  class: arithmetic
  inputs: [rd]
  outputs: [rd]
  f: "rd = rd & rd"
  flags: [z,n,v]
  clocks: 1
- id: 20
  type: instruction
  mnemonic: clr
  class: arithmetic
  inputs: [rd]
  outputs: [rd]
  f: "rd = rd ^ rd"
  flags: [z,n,v]
  clocks: 1
- id: 21
  type: instruction
  mnemonic: ser
  class: arithmetic
  inputs: [rd]
  outputs: [rd]
  f: "rd = 255"
  flags: []
  clocks: 1
- id: 22
  type: instruction
  mnemonic: rjmp
  class: branch
  inputs: [k]
  f: "pc = pc + k + 1"
  flags: []
  clocks: 2
- id: 23
  type: instruction
  mnemonic: ijmp
  class: branch
  inputs: []
  f: "pc = z"
  flags: []
  clocks: 2
- id: 24
  type: instruction
  mnemonic: jmp
  class: branch
  inputs: [k]
  f: "pc = k"
  flags: []
  clocks: 3
- id: 25
  type: instruction
  mnemonic: rcall
  class: branch
  inputs: [k]
  f: "pc = pc + k + 1"
  flags: []
  clocks: 4
- id: 26
  type: instruction
  mnemonic: icall
  class: branch
  inputs: []
  f: "pc = z"
  flags: []
  clocks: 4
- id: 27
  type: instruction
  mnemonic: call
  class: branch
  inputs: [k]
  f: "pc = k"
  flags: []
  clocks: 5
- id: 28
  type: instruction
  mnemonic: ret
  class: branch
  inputs: []
  f: "pc = stack"
  flags: []
  clocks: 5
- id: 29
  type: instruction
  mnemonic: reti
  class: branch
  inputs: []
  f: "pc = stack"
  flags: [i]
  clocks: 5
- id: 30
  type: instruction
  mnemonic: cpse_1w
  class: branch
  inputs: [rd, rr]
  f: "pc = pc + 2 if rd == rr else pc"
  flags: []
  clocks: [1,2]
- id: 31
  type: instruction
  mnemonic: cpse_2w
  class: branch
  inputs: [rd, rr]
  f: "pc = pc + 3 if rd == rr else pc"
  flags: []
  clocks: [1,3]
- id: 32
  type: instruction
  mnemonic: cp
  class: branch
  inputs: [rd,rr]
  f: "rd == rr"
  flags: [z,n,v,c,h]
  clocks: 1
- id: 33
  type: instruction
  mnemonic: cpc
  class: branch
  inputs: [rd,rr]
  f: "rd == rr && rd == c"
  flags: [z,n,v,c,h]
  clocks: 1
- id: 34
  type: instruction
  mnemonic: cpi
  class: branch
  inputs: [rd, k]
  f: "rd == k"
  flags: [z,n,v,c,h]
  clocks: 1
- id: 35
  type: instruction
  mnemonic: sbrc_1w
  class: branch
  inputs: [rr, b]
  f: "pc = pc if rr >> b & 1 else pc + 2"
  flags: []
  clocks: [1,2]
- id: 36
  type: instruction
  mnemonic: sbrc_2w
  class: branch
  inputs: [rr, b]
  f: "pc = pc if rr >> b & 1 else pc + 3"
  flags: []
  clocks: [1,3]
- id: 37
  type: instruction
  mnemonic: sbrs_1w
  class: branch
  inputs: [rr, b]
  f: "pc = pc + 2 if rr >> b & 1 else pc"
  flags: []
  clocks: [1,2]
- id: 38
  type: instruction
  mnemonic: sbrs_2w
  class: branch
  inputs: [rr, b]
  f: "pc = pc + 3 if rr >> b & 1 else pc"
  flags: []
  clocks: [1,3]
- id: 39
  type: instruction
  mnemonic: sbic_1w
  class: branch
  inputs: [p, b]
  f: "pc = pc if p >> b & 1 else pc + 2"
  flags: []
  clocks: [1,2]
- id: 40
  type: instruction
  mnemonic: sbic_2w
  class: branch
  inputs: [p, b]
  f: "pc = pc if p >> b & 1 else pc + 3"
  flags: []
  clocks: [1,3]
- id: 41
  type: instruction
  mnemonic: sbis_1w
  class: branch
  inputs: [p, b]
  f: "pc = pc + 2 if p >> b & 1 else pc"
  flags: []
  clocks: [1,2]
- id: 42
  type: instruction
  mnemonic: sbis_2w
  class: branch
  inputs: [p, b]
  f: "pc = pc + 3 if p >> b & 1 else pc"
  flags: []
  clocks: [1,3]
- id: 43
  type: instruction
  mnemonic: brbs
  class: branch
  inputs: [s,k]
  f: "pc = (pc + k + 1) if sreg >> s & 1 else pc"
  flags: []
  clocks: [1,2]
- id: 44
  type: instruction
  mnemonic: brbc
  class: branch
  inputs: [s,k]
  f: "pc = pc if sreg >> s & 1 else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 45
  type: instruction
  mnemonic: breq
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if z else pc"
  flags: []
  clocks: [1,2]
- id: 46
  type: instruction
  mnemonic: brne
  class: branch
  inputs: [k]
  f: "pc = pc if z else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 47
  type: instruction
  mnemonic: brcs
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if c else pc"
  flags: []
  clocks: [1,2]
- id: 48
  type: instruction
  mnemonic: brcc
  class: branch
  inputs: [k]
  f: "pc = pc if c else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 49
  type: instruction
  mnemonic: brsh
  class: branch
  inputs: [k]
  f: "pc = pc if c else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 50
  type: instruction
  mnemonic: brlo
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if c else pc"
  flags: []
  clocks: [1,2]
- id: 51
  type: instruction
  mnemonic: brmi
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if n else pc"
  flags: []
  clocks: [1,2]
- id: 52
  type: instruction
  mnemonic: brpl
  class: branch
  inputs: [k]
  f: "pc = pc if n else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 52
  type: instruction
  mnemonic: brge
  class: branch
  inputs: [k]
  f: "pc = pc if (n ^ v) else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 53
  type: instruction
  mnemonic: brlt
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if (n ^ v) else pc"
  flags: []
  clocks: [1,2]
- id: 54
  type: instruction
  mnemonic: brhs
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if h else pc"
  flags: []
  clocks: [1,2]
- id: 55
  type: instruction
  mnemonic: brhc
  class: branch
  inputs: [k]
  f: "pc = pc if h else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 56
  type: instruction
  mnemonic: brts
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if t else pc"
  flags: []
  clocks: [1,2]
- id: 57
  type: instruction
  mnemonic: brtc
  class: branch
  inputs: [k]
  f: "pc = pc if t else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 58
  type: instruction
  mnemonic: brvs
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if v else pc"
  flags: []
  clocks: [1,2]
- id: 59
  type: instruction
  mnemonic: brvc
  class: branch
  inputs: [k]
  f: "pc = pc if v else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 60
  type: instruction
  mnemonic: brie
  class: branch
  inputs: [k]
  f: "pc = (pc + k + 1) if i else pc"
  flags: []
  clocks: [1,2]
- id: 61
  type: instruction
  mnemonic: brid
  class: branch
  inputs: [k]
  f: "pc = pc if i else (pc + k + 1)"
  flags: []
  clocks: [1,2]
- id: 62
  type: instruction
  mnemonic: sbi
  class: bit
  inputs: [p,b]
  f: "set_io(p, b, 1)"
  flags: []
  clocks: 2
- id: 63
  type: instruction
  mnemonic: sbi
  class: bit
  inputs: [p,b]
  f: "set_io(p, b, 0)"
  flags: []
  clocks: 2
- id: 64
  type: instruction
  mnemonic: lsl
  class: bit
  inputs: [rd]
  f: "rd = rd << 1"
  flags: [z,c,n,v]
  clocks: 1
- id: 64
  type: instruction
  mnemonic: lsr
  class: bit
  inputs: [rd]
  f: "rd = rd >> 1"
  flags: [z,c,n,v]
  clocks: 1
- id: 65
  type: instruction
  mnemonic: rol
  class: bit
  inputs: [rd]
  f: ["c = rd >> 7 & 1", "rd = (rd << 1) | c"]
  flags: [z,c,n,v]
  clocks: 1
- id: 66
  type: instruction
  mnemonic: ror
  class: bit
  inputs: [rd]
  f: ["c = rd & 1", "rd = (rd >> 1) | (c << 7)"]
  flags: [z,c,n,v]
  clocks: 1
- id: 67
  type: instruction
  mnemonic: asr
  class: bit
  inputs: [rd]
  f: "rd = (rd >> 1) | (rd & 128)"
  flags: [z,c,n,v]
  clocks: 1
- id: 68
  type: instruction
  mnemonic: swap
  class: bit
  inputs: [rd]
  f: "rd = (rd << 4) | (rd & 240) >> 4"
  flags: []
  clocks: 1
- id: 69
  type: instruction
  mnemonic: bset
  class: bit
  inputs: [s]
  f: "set_flag(s, 1)"
  flags: ["get_flag(s)"]
  clocks: 1
- id: 70
  type: instruction
  mnemonic: bclr
  class: bit
  inputs: [s]
  f: "set_flag(s, 0)"
  flags: ["get_flag(s)"]
  clocks: 1
- id: 71
  type: instruction
  mnemonic: bst
  class: bit
  inputs: [rr, b]
  f: "t = rr >> b & 1"
  flags: [t]
  clocks: 1
- id: 72
  type: instruction
  mnemonic: bld
  class: bit
  inputs: [rr, b]
  f: "rd = rd | (t << b)"
  flags: []
  clocks: 1
- id: 73
  type: instruction
  mnemonic: sec
  class: bit
  inputs: []
  f: "c = 1"
  flags: [c]
  clocks: 1
- id: 74
  type: instruction
  mnemonic: clc
  class: bit
  inputs: []
  f: "c = 0"
  flags: [c]
  clocks: 1
- id: 75
  type: instruction
  mnemonic: sen
  class: bit
  inputs: []
  f: "n = 1"
  flags: [n]
  clocks: 1
- id: 76
  type: instruction
  mnemonic: cln
  class: bit
  inputs: []
  f: "n = 0"
  flags: [n]
  clocks: 1
- id: 77
  type: instruction
  mnemonic: sez
  class: bit
  inputs: []
  f: "z = 1"
  flags: [z]
  clocks: 1
- id: 78
  type: instruction
  mnemonic: clz
  class: bit
  inputs: []
  f: "z = 0"
  flags: [z]
  clocks: 1
- id: 79
  type: instruction
  mnemonic: sei
  class: bit
  inputs: []
  f: "i = 1"
  flags: [i]
  clocks: 1
- id: 80
  type: instruction
  mnemonic: cli
  class: bit
  inputs: []
  f: "i = 0"
  flags: [i]
  clocks: 1
- id: 81
  type: instruction
  mnemonic: ses
  class: bit
  inputs: []
  f: "s = 1"
  flags: [s]
  clocks: 1
- id: 82
  type: instruction
  mnemonic: cls
  class: bit
  inputs: []
  f: "s = 0"
  flags: [s]
  clocks: 1
- id: 83
  type: instruction
  mnemonic: sev
  class: bit
  inputs: []
  f: "v = 1"
  flags: [v]
  clocks: 1
- id: 84
  type: instruction
  mnemonic: clv
  class: bit
  inputs: []
  f: "v = 0"
  flags: [v]
  clocks: 1
- id: 85
  type: instruction
  mnemonic: set
  class: bit
  inputs: []
  f: "t = 1"
  flags: [t]
  clocks: 1
- id: 86
  type: instruction
  mnemonic: clt
  class: bit
  inputs: []
  f: "t = 0"
  flags: [t]
  clocks: 1
- id: 87
  type: instruction
  mnemonic: seh
  class: bit
  inputs: []
  f: "h = 1"
  flags: [h]
  clocks: 1
- id: 88
  type: instruction
  mnemonic: clh
  class: bit
  inputs: []
  f: "h = 0"
  flags: [h]
  clocks: 1
- id: 89
  type: instruction
  mnemonic: mov
  class: transfer
  inputs: [rd, rr]
  f: "rd = rr"
  flags: []
  clocks: 1
- id: 90
  type: instruction
  mnemonic: movw
  class: transfer
  inputs: [rd, rr]
  f: "(rd+1):rd = (rr+1):rr"
  flags: []
  clocks: 1
- id: 91
  type: instruction
  mnemonic: ldi
  class: transfer
  inputs: [rd, K]
  f: "rd = K"
  flags: []
  clocks: 1
- id: 91
  type: instruction
  mnemonic: ld_x
  class: transfer
  inputs: [rd, X]
  f: "rd = (X)"
  flags: []
  clocks: 2
- id: 92
  type: instruction
  mnemonic: ld_x_post_inc
  class: transfer
  inputs: [rd, X]
  f: ["rd = (X)", "X += 1"]
  flags: []
  clocks: 2
- id: 93
  type: instruction
  mnemonic: ld_x_pre_dec
  class: transfer
  inputs: [rd, X]
  f: ["X -= 1", "rd = (X)"]
  flags: []
  clocks: 2
- id: 94
  type: instruction
  mnemonic: ld_y
  class: transfer
  inputs: [rd, Y]
  f: "rd = (Y)"
  flags: []
  clocks: 2
- id: 95
  type: instruction
  mnemonic: ld_y_post_inc
  class: transfer
  inputs: [rd, Y]
  f: ["rd = (Y)", "Y += 1"]
  flags: []
  clocks: 2
- id: 96
  type: instruction
  mnemonic: ld_y_pre_dec
  class: transfer
  inputs: [rd, Y]
  f: ["Y -= 1", "rd = (Y)"]
  flags: []
  clocks: 2
- id: 97
  type: instruction
  mnemonic: ld_z
  class: transfer
  inputs: [rd, Z]
  f: "rd = (Z)"
  flags: []
  clocks: 2
- id: 98
  type: instruction
  mnemonic: ld_z_post_inc
  class: transfer
  inputs: [rd, Z]
  f: ["rd = (Z)", "Z += 1"]
  flags: []
  clocks: 2
- id: 99
  type: instruction
  mnemonic: ld_z_pre_dec
  class: transfer
  inputs: [rd, Z]
  f: ["Z -= 1", "rd = (Z)"]
  flags: []
  clocks: 2
- id: 100
  type: instruction
  mnemonic: ldd_y
  class: transfer
  inputs: [rd, Y, q]
  f: "rd = (Y + q)"
  flags: []
  clocks: 2
- id: 101
  type: instruction
  mnemonic: ldd_z
  class: transfer
  inputs: [rd, Z, q]
  f: "rd = (Z + q)"
  flags: []
  clocks: 2
- id: 102
  type: instruction
  mnemonic: lds
  class: transfer
  inputs: [rd, k]
  f: "rd = (k)"
  flags: []
  clocks: 2
- id: 103
  type: instruction
  mnemonic: st_x
  class: transfer
  inputs: [rr, X]
  f: "(X) = rr"
  flags: []
  clocks: 2
- id: 103
  type: instruction
  mnemonic: st_x_post_inc
  class: transfer
  inputs: [rr, X]
  f: ["(X) = rr", "X += 1"]
  flags: []
  clocks: 2
- id: 104
  type: instruction
  mnemonic: st_x_pre_dec
  class: transfer
  inputs: [rr, X]
  f: ["X -= 1", "(X) = rr"]
  flags: []
  clocks: 2
- id: 105
  type: instruction
  mnemonic: st_y
  class: transfer
  inputs: [rr, Y]
  f: "(Y) = rr"
  flags: []
  clocks: 2
- id: 106
  type: instruction
  mnemonic: st_y_post_inc
  class: transfer
  inputs: [rr, Y]
  f: ["(Y) = rr", "Y += 1"]
  flags: []
  clocks: 2
- id: 107
  type: instruction
  mnemonic: st_y_pre_dec
  class: transfer
  inputs: [rr, Y]
  f: ["Y -= 1", "(Y) = rr"]
  flags: []
  clocks: 2
- id: 108
  type: instruction
  mnemonic: st_y_dsp
  class: transfer
  inputs: [rr, Y, q]
  f: "(Y + q) = rr"
  flags: []
  clocks: 2
- id: 109
  type: instruction
  mnemonic: st_z
  class: transfer
  inputs: [rr, Z]
  f: "(Z) = rr"
  flags: []
  clocks: 2
- id: 110
  type: instruction
  mnemonic: st_z_post_inc
  class: transfer
  inputs: [rr, Z]
  f: ["(Z) = rr", "Z += 1"]
  flags: []
  clocks: 2
- id: 111
  type: instruction
  mnemonic: st_z_pre_dec
  class: transfer
  inputs: [rr, Z]
  f: ["Z -= 1", "(Z) = rr"]
  flags: []
  clocks: 2
- id: 112
  type: instruction
  mnemonic: st_z_dsp
  class: transfer
  inputs: [rr, Z, q]
  f: "(Z + q) = rr"
  flags: []
  clocks: 2
- id: 113
  type: instruction
  mnemonic: sts
  class: transfer
  inputs: [k, rr]
  f: "(k) = rr"
  flags: []
  clocks: 2
- id: 114
  type: instruction
  mnemonic: lpm_r0
  class: transfer
  inputs: [Z]
  f: "r0 = (Z)"
  flags: []
  clocks: 3
- id: 115
  type: instruction
  mnemonic: lpm_rd
  class: transfer
  inputs: [rd, Z]
  f: "rd = (Z)"
  flags: []
  clocks: 3
- id: 116
  type: instruction
  mnemonic: lpm_rd_post_inc
  class: transfer
  inputs: [rd, Z]
  f: ["rd = (Z)", "Z += 1"]
  flags: []
  clocks: 3
- id: 117
  type: instruction
  mnemonic: spm
  class: transfer
  inputs: [Z]
  f: "(Z) = r1:r0"
  flags: []
  clocks: null
- id: 118
  type: instruction
  mnemonic: in
  class: transfer
  inputs: [rd, P]
  f: "rd = P"
  flags: []
  clocks: 1
- id: 119
  type: instruction
  mnemonic: out
  class: transfer
  inputs: [rr, P]
  f: "P = rr"
  flags: []
  clocks: 1
- id: 120
  type: instruction
  mnemonic: push
  class: transfer
  inputs: [rr]
  f: "stack = rr"
  flags: []
  clocks: 2
- id: 121
  type: instruction
  mnemonic: pop
  class: transfer
  inputs: [rd]
  f: "rd = stack"
  flags: []
  clocks: 2
- id: 122
  type: instruction
  mnemonic: nop
  class: mcu
  inputs: []
  f: null
  flags: []
  clocks: 1
- id: 123
  type: instruction
  mnemonic: sleep
  class: mcu
  inputs: []
  f: null
  flags: []
  clocks: 1
- id: 124
  type: instruction
  mnemonic: wdr
  class: mcu
  inputs: []
  f: null
  flags: []
  clocks: 1
- id: 125
  type: instruction
  mnemonic: break
  class: mcu
  inputs: []
  f: null
  flags: []
  clocks: null
